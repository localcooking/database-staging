/*
Record of all orders, after a user presses "checkout"

--{{ orders }}

*/
CREATE TABLE IF NOT EXISTS api.orders (
  order_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id INT NOT NULL REFERENCES api.users (user_id) ON DELETE RESTRICT,
  ordered_on TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP
);

/*
Each item purchased under a single order (after a user clicks "Checkout").

--{{ orderContents }}

*/
CREATE TABLE IF NOT EXISTS api.order_contents (
  order_content_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id INT NOT NULL REFERENCES api.orders (order_id) ON DELETE RESTRICT,
  item_revision_id INT NOT NULL REFERENCES api.item_revisions (item_revision_id) ON DELETE RESTRICT,
  quantity INT NOT NULL CHECK (quantity > 0),
  completed_on TIMESTAMPTZ,
  delivered_on TIMESTAMPTZ,
  CONSTRAINT chk_completed_delivered CHECK (NOT (delivered_on IS NOT NULL AND completed_on IS NULL)) /* makes sure it's not delivered before it's complete */
);
